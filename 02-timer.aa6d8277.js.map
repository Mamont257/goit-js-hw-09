{"mappings":"YA6EA,IAAMA,EAAOC,SAASC,cAAc,SAiCpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,GACAF,EAAI,CAAEH,SAAUA,EAAUC,MAAOA,IACjCQ,QAAQC,IAAI,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,SAE1DG,EAAI,CAAEJ,SAAUA,EAAUC,MAAOA,IACjCQ,QAAQC,IAAI,sBAAuCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,O,GAE5DA,E,IAzCPL,EAAKgB,iBAAiB,UAEtB,SAAkBC,GACdA,EAAIC,iBAKJ,IAAIb,EAAQc,OAAOnB,EAAKoB,SAASf,MAAMgB,OACjCC,EAAOH,OAAOnB,EAAKoB,SAASE,KAAKD,OAEvC,IAAKE,EAAI,EAAGA,GAAKvB,EAAKoB,SAASI,OAAOH,MAAOE,IACzCpB,EAAcoB,EAAGlB,GACjBA,GAAgBiB,C,IAgCxBnB,IACGsB,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBQ,QAAQC,IAAI,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,IAE3DsB,OAAM,SAAAD,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBQ,QAAQC,IAAI,sBAAuCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,M","sources":["src/js/02-timer.js"],"sourcesContent":["// import flatpickr from \"flatpickr\";\n// import \"flatpickr/dist/flatpickr.min.css\";\n// import Notiflix from 'notiflix';\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//       onDat(selectedDates[0]);\n//   },\n// };\n// flatpickr(\"#datetime-picker\", options);\n\n// const btn = document.querySelector(\"button[data-start]\");\n// const day = document.querySelector(\"span[data-days]\");\n// const hour = document.querySelector(\"span[data-hours]\");\n// const minute = document.querySelector(\"span[data-minutes]\");\n// const second = document.querySelector(\"span[data-seconds]\");\n// btn.addEventListener('click', onClick);\n\n// let timerTime = null;\n// const date = new Date();\n\n// function onDat(dat) {\n//     timerTime = dat.getTime() - date;\n//     if (timerTime > 0) {\n//         btn.removeAttribute(\"disabled\");\n//     } else {\n//         Notiflix.Notify.failure('Please choose a date in the future');\n//     }\n// }\n\n// function onClick() {\n//     let intervalId = setInterval(() => {\n//         timerTime = timerTime - 1000;\n//         if (timerTime > 0) { \n//             let time = convertMs(timerTime);\n//             day.textContent = time.days;\n//             hour.textContent = time.hours;\n//             minute.textContent = time.minutes;\n//             second.textContent = time.seconds;\n//         } else {\n//             btn.setAttribute(\"disabled\", '');\n//             clearInterval(intervalId);\n//         }\n//     }, 1000)\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// console.log(\"hello\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst form = document.querySelector(\".form\");\n// console.log(form);\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n    evt.preventDefault();\n    // console.log(\"Hi\");\n\n    // console.dir(form.elements.step.value)\n\n    let delay = Number(form.elements.delay.value);\n    const step = Number(form.elements.step.value);\n\n    for (i = 1; i <= form.elements.amount.value; i++){\n        createPromise(i, delay)\n        delay = delay + step;\n    }\n}\n\n\n\n//  function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n// let promise;\n\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n          res({ position: position, delay: delay});\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n          rej({ position: position, delay: delay});\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay)\n  })\n}\n\ncreatePromise()\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n\n// createPromise(0, 1000)\n\n\n\n\n\n\n\n\n\n\n// const promise = new Promise((res, rej) => {\n//     const random = Math.random();\n\n//     setTimeout(() => {\n//         if (random > 0.5) {\n//             res('УРАААА 😎')\n//         } else {\n//             rej('Біда 😥')\n//         }\n//     }, 3000)\n// })\n\n\n// // console.log(promise);\n\n// promise.then((value) => {\n//         console.log(value)\n//         return value + \"🙈\";\n//     }, (err) => {\n//         console.log(err)\n//     })\n//     .then(data => console.log(data))\n//     .catch(err => console.log(err))\n//     .finally(()=>{\n\n//     })"],"names":["$84b9dae4df53835d$var$form","document","querySelector","$84b9dae4df53835d$var$createPromise","position","delay","Promise","res","rej","shouldResolve","Math","random","setTimeout","console","log","concat","addEventListener","evt","preventDefault","Number","elements","value","step","i","amount","then","param","catch"],"version":3,"file":"02-timer.aa6d8277.js.map"}